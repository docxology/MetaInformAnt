# METAINFORMANT Cursor Rules

## Directories
- output/: All outputs from tests and real runs must go here by default. Treat as ephemeral and reproducible.
- config/: Repository-level configuration files and options. Read via metainformant.core.config; allow env overrides.
- data/: Inputs such as datasets and local databases. Read-mostly, organized by domain and version.

## Path and I/O
- Do not write outside output/ unless an explicit user path is provided.
- Prefer functional APIs that accept a destination path; if omitted, default to output/ with a sensible subpath.
- Use metainformant.core.io for file I/O (JSON/JSONL/CSV/TSV) and gzip-aware open.
- Use metainformant.core.paths for path handling and containment checks.
- Use metainformant.core.cache for small JSON caches under output/ if needed.

## Configuration
- Centralize config loading in metainformant.core.config.
- Allow env vars to override files in config/.
- Domain modules must not hardcode absolute paths; accept config objects/paths from callers.

## Testing Policy (STRICTLY NO MOCKS/FAKES)
- **ABSOLUTE PROHIBITION**: Never use fake/mocked/stubbed methods, objects, or network shims in code or tests.
- **Real Implementation Only**: Tests must exercise real code paths and real external behavior without exceptions.
  - Networked tests: perform real HTTP requests with short timeouts. If offline, skip gracefully with clear messages.
  - CLI-dependent tests (e.g., amalgkit): run only when the dependency is available on PATH; otherwise skip with dependency notes.
  - Database tests: use real database connections or skip when unavailable.
  - API tests: make real API calls or skip when network/credentials unavailable.
- **Anti-Pattern Enforcement**: Mocking is an anti-pattern that creates brittle tests disconnected from reality.
- **Quality Assurance**: Real implementations reveal actual bugs, performance issues, and integration problems.
- **Environment Setup**: It is acceptable to set environment variables for test setup, but do not monkeypatch or replace functions.
- **Test Artifacts**: Tests must write all artifacts only under output/ directory.
- **Reproducibility**: Prefer deterministic seeds and stable filenames for reproducible test runs.
- **Clear Documentation**: When external dependencies are unavailable, tests must clearly document what is being skipped and why.

## Documentation
- Keep docs concise and reference core utilities. Examples that write files must write under output/ and mention how to override paths.

## Style
- Python 3.11+. Clear, modular functions; avoid hidden global state.
- Follow the repository code style and typing practices.

## Contributions
- New modules should: (1) read configs from config/ (with env overrides), (2) read inputs from data/, and (3) write outputs to output/ by default.
