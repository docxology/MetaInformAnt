[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "metainformant"
version = "0.1.0"
description = "Comprehensive bioinformatics toolkit for multi-domain analysis"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "biopython>=1.79",
    "requests>=2.25.0",
    "pyyaml>=6.0",
    "pytest-timeout>=2.4.0",
]

[project.optional-dependencies]
# Core scientific dependencies
scientific = [
    "scipy>=1.9.0",
    "scikit-learn>=1.1.0",
    "seaborn>=0.12.0",
    "networkx>=3.0",
    "umap-learn>=0.5.3",
    "scanpy>=1.9.0",  # Single-cell analysis
    "anndata>=0.8.0",  # Annotated data structures
]

# Machine learning and advanced analytics
ml = [
    "scipy>=1.9.0",
    "scikit-learn>=1.1.0",
    "umap-learn>=0.5.3",
    "optuna>=3.0.0",  # Hyperparameter optimization
    "joblib>=1.2.0",  # Parallel processing
    "xgboost>=1.6.0",  # Gradient boosting
    "lightgbm>=3.3.0",  # Light gradient boosting
]

# Network analysis
networks = [
    "networkx>=3.0",
    "python-louvain>=0.16",  # Community detection
    "cdlib>=0.2.6",  # Community discovery library
    # "graph-tool",  # High-performance graph analysis (system dependent - install manually if needed)
]

# Single-cell analysis
singlecell = [
    "scanpy>=1.9.0",
    "anndata>=0.8.0",
    "scipy>=1.9.0",
    "scikit-learn>=1.1.0",
    "umap-learn>=0.5.3",
    "seaborn>=0.12.0",
    "leidenalg>=0.9.0",  # Leiden clustering
    "louvain>=0.8.0",  # Louvain clustering
]

# Visualization enhancements
visualization = [
    "seaborn>=0.12.0",
    "plotly>=5.10.0",
    "bokeh>=2.4.0",
    "altair>=4.2.0",
    "graphviz>=0.20.1",  # Network visualization
]

# Development and testing
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # For parallel test execution
    "pytest-benchmark>=4.0.0",  # Performance benchmarking
    "pytest-mock>=3.10.0",  # Mock utilities (for external services only)
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",  # Documentation
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",  # Markdown support in docs
    "jupyter>=1.0.0",  # For example notebooks
    "nbsphinx>=0.8.0",  # Jupyter notebook integration
]

# Database and external data
database = [
    "psycopg2-binary>=2.9.0",
    "sqlalchemy>=2.0.0",
    "pymongo>=4.0.0",  # MongoDB support
    "redis>=4.3.0",  # Redis caching
]

# External bioinformatics tools integration
external-tools = [
    "ncbi-datasets-pylib>=16.0.0",  # NCBI datasets integration
    # "pyvcf>=0.6.8",  # VCF file handling - temporarily disabled due to build issues
    "pysam>=0.21.0",  # SAM/BAM file handling
    "dendropy>=4.5.0",  # Phylogenetic analysis
]

# Performance and parallel computing
performance = [
    "numba>=0.56.0",  # JIT compilation
    "dask>=2022.8.0",  # Parallel computing
    "ray>=2.0.0",  # Distributed computing
    "joblib>=1.2.0",  # Parallel processing
]

# All optional dependencies combined
all = [
    "scipy>=1.9.0",
    "scikit-learn>=1.1.0",
    "seaborn>=0.12.0",
    "networkx>=3.0",
    "umap-learn>=0.5.3",
    "scanpy>=1.9.0",
    "anndata>=0.8.0",
    "python-louvain>=0.16",
    "cdlib>=0.2.6",
    "plotly>=5.10.0",
    "bokeh>=2.4.0",
    "altair>=4.2.0",
    "psycopg2-binary>=2.9.0",
    "sqlalchemy>=2.0.0",
    "ncbi-datasets-pylib>=16.0.0",
    "numba>=0.56.0",
    "dask>=2022.8.0",
    "joblib>=1.2.0",
]

[project.scripts]
metainformant = "metainformant.__main__:main"

# Test configuration - STRICTLY NO MOCKING POLICY
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",  # Show short test summary for all except passes
    "--strict-markers",
    "--strict-config",
    "--cov=src/metainformant",  # Coverage for source code
    "--cov-report=term-missing",  # Show missing lines in terminal
    "--cov-report=html",  # Generate HTML coverage report
    "--cov-report=xml",   # Generate XML coverage report for CI
    "--cov-fail-under=85",  # Fail if coverage below 85%
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "network: marks tests requiring network access - REAL API CALLS ONLY",
    "external_tool: marks tests requiring external tools (muscle, amalgkit, etc.)",
    "integration: marks tests as integration tests with real implementations",
    "no_mock: enforces that NO mocking/faking is allowed in any test",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    # Warn about any mock usage as it violates our policy
    "error::pytest.PytestUnraisableExceptionWarning:.*mock.*",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/metainformant"]
branch = true  # Enable branch coverage
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/conftest.py",
    "*/__main__.py",  # CLI entry points often hard to test comprehensively
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "output/coverage_html"

[tool.coverage.xml]
output = "output/coverage.xml"

# Black code formatting
[tool.black]
line-length = 120
target-version = ['py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module type checking options
[[tool.mypy.overrides]]
module = [
    "Bio.*",
    "matplotlib.*",
    "pandas.*",
    "numpy.*",
    "sklearn.*",
    "requests.*",
]
ignore_missing_imports = true

# Setuptools configuration
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# UV configuration for fast, reliable dependency management
[tool.uv]
# Use the system's Python interpreter if needed
python-preference = "only-system"

# Enable dependency caching for faster installs
cache-dir = ".uv-cache"

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
]

# Note: UV task runner scripts would go here when supported in future versions
