[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "metainformant"
version = "0.1.0"
description = "Comprehensive bioinformatics toolkit for multi-domain analysis"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0", 
    "matplotlib>=3.5.0",
    "biopython>=1.79",
    "requests>=2.25.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # For parallel test execution
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=1.0.0",
]
database = [
    "psycopg2-binary>=2.9.0",
    "sqlalchemy>=2.0.0",
]
external-tools = [
    "ncbi-datasets-pylib>=16.0.0",  # Optional NCBI datasets integration
]

[project.scripts]
metainformant = "metainformant.__main__:main"

# Test configuration - STRICTLY NO MOCKING POLICY
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",  # Show short test summary for all except passes
    "--strict-markers",
    "--strict-config",
    "--cov=src/metainformant",  # Coverage for source code
    "--cov-report=term-missing",  # Show missing lines in terminal
    "--cov-report=html",  # Generate HTML coverage report
    "--cov-report=xml",   # Generate XML coverage report for CI
    "--cov-fail-under=85",  # Fail if coverage below 85%
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "network: marks tests requiring network access - REAL API CALLS ONLY",
    "external_tool: marks tests requiring external tools (muscle, amalgkit, etc.)",
    "integration: marks tests as integration tests with real implementations",
    "no_mock: enforces that NO mocking/faking is allowed in any test",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    # Warn about any mock usage as it violates our policy
    "error::pytest.PytestUnraisableExceptionWarning:.*mock.*",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/metainformant"]
branch = true  # Enable branch coverage
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/conftest.py",
    "*/__main__.py",  # CLI entry points often hard to test comprehensively
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "output/coverage_html"

[tool.coverage.xml]
output = "output/coverage.xml"

# Black code formatting
[tool.black]
line-length = 120
target-version = ['py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module type checking options
[[tool.mypy.overrides]]
module = [
    "Bio.*",
    "matplotlib.*",
    "pandas.*", 
    "numpy.*",
    "sklearn.*",
    "requests.*",
]
ignore_missing_imports = true

# Setuptools configuration
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"